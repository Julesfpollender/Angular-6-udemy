# Custom notes through the course

## Components
@Component({
  selector: 'app-component-name',
  templateUrl: './component-ame.component.html',
  styleUrls: ['./component-name.component.css']
})

## Directives
Can be added as html attribute to change the DOM/styles and more...
Attribute Directives : (ngStyle, ngClass, ...)
Structural Directives : (ngIf, ngFor ...) Need to add * before as it changes to DOM structure.

### Create our own Directive
@Directive({
  selector: '[appSelector]'
})
If you need to modify dom element, its better to use the Renderer (Renderer2 from @angular/core).
@HostBinding and @HostListener is easier way to modify html attributes based on events.

## Services
Wrap fonctionnality in a services makes it easy to inject into one or many components, so it is centralise, cohesive and easily 
reusable everywhere we need the fonctionnality. For example, data fetching is good exemple to put in services.
Need the @Injectable() in component where you need to inject a services.
To be able to inject, we need to add it into the NgModule providers. *Note: it will be accessible in every child component

## Communication Inside component
- Property binding: <img [src]="imagePath" /> // Where imagePath is a variable in component
- String interpolation:  {{ data }} // Where data in defined in component
- Event binding: (click)="onClick()" // implement method onClick in component class
- Two-way-binding [(nbModel)="data"] // Where data in defined in component
- Local reference :
In html: we can add <input ... #myId> and then pass this element through event like click: (click)="onEventX(myId)" 
This way, the input element would be accessible in the component function onEventX(data){ ... }  
To access without passing in function see @ViewChild('myId') myIdRef: ElementRef, where ElementRef is the element where we put the #myId

## Communication between components
### Projecting content from parent
- In parent: <child><p>Some Content</p><child>
- In child: <ng-content></ng-content> will output <p>Some Content</p>
ps.: Can also use local reference with this pattern: see @ContentChild('selector') seleted: ElementRef

### How to pass props to child:
To be able to bind to our own property (and pass info to the child component), we need to had @Input() in from of the property
- In parent html => <componentChild [element]="elementToPass"></componentChild> 
- In child component => need to define the property: @Input() element : string;

### How child communicated to parent
We need to bind to event (child event) in the parent
- In parent html => <componentChild (eventX)="eventXReceive($event)"></componentChild> 
- In parent component => eventXReceive(data: string){ //DO SOMETHING }
Then we need to emit event in child
- In child component => add property accessible from outside: @Output() eventX = new EventEmitter<string>();
- In child component => onEventX(){ this.eventX.emit("dataToEmit")}

### It is also possible to communicate between component through a service.
- Add the EventEmitter in the service
- In a component A,  emit the event using the service
- In a component B,  subscribe to the event using the service
